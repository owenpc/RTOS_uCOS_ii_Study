
t.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  0000063a  000006ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000063a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006b4  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000010c  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000804  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001fe  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000631  00000000  00000000  00001926  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ab  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ab  00000000  00000000  00002203  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000029ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e3       	ldi	r30, 0x3A	; 58
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	a2 34       	cpi	r26, 0x42	; 66
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a2 e4       	ldi	r26, 0x42	; 66
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a2 34       	cpi	r26, 0x42	; 66
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 d6 02 	call	0x5ac	; 0x5ac <main>
  c2:	0c 94 1b 03 	jmp	0x636	; 0x636 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <UART_config>:

#ifndef MYUART_H
#define MYUART_H 1

void UART_config(unsigned long int baudrate)
{
  ca:	ef 92       	push	r14
  cc:	ff 92       	push	r15
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	df 93       	push	r29
  d4:	cf 93       	push	r28
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	ec 97       	sbiw	r28, 0x3c	; 60
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	f8 94       	cli
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	cd bf       	out	0x3d, r28	; 61
  e6:	7b 01       	movw	r14, r22
  e8:	8c 01       	movw	r16, r24
	unsigned int UBRR_set=0, UBRR_low, UBRR_high;
	unsigned long int arr1[]={2400,4800,9600,14400,19200,28800,38400,57600,76800,115200};
  ea:	de 01       	movw	r26, r28
  ec:	55 96       	adiw	r26, 0x15	; 21
  ee:	e9 e1       	ldi	r30, 0x19	; 25
  f0:	f1 e0       	ldi	r31, 0x01	; 1
  f2:	88 e2       	ldi	r24, 0x28	; 40
  f4:	01 90       	ld	r0, Z+
  f6:	0d 92       	st	X+, r0
  f8:	81 50       	subi	r24, 0x01	; 1
  fa:	e1 f7       	brne	.-8      	; 0xf4 <UART_config+0x2a>
	unsigned int arr2[]={415,207,103,68,51,34,25,16,12,8};
  fc:	de 01       	movw	r26, r28
  fe:	11 96       	adiw	r26, 0x01	; 1
 100:	e5 e0       	ldi	r30, 0x05	; 5
 102:	f1 e0       	ldi	r31, 0x01	; 1
 104:	84 e1       	ldi	r24, 0x14	; 20
 106:	01 90       	ld	r0, Z+
 108:	0d 92       	st	X+, r0
 10a:	81 50       	subi	r24, 0x01	; 1
 10c:	e1 f7       	brne	.-8      	; 0x106 <UART_config+0x3c>

	UCSR1B = 0x18;  //polled reception, 8-bits,........Transmition has been disabled
 10e:	88 e1       	ldi	r24, 0x18	; 24
 110:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = 0x16;  //1 stop bit, no parity
 114:	86 e1       	ldi	r24, 0x16	; 22
 116:	80 93 9d 00 	sts	0x009D, r24
 11a:	fe 01       	movw	r30, r28
 11c:	75 96       	adiw	r30, 0x15	; 21
 11e:	9e 01       	movw	r18, r28
 120:	2f 5f       	subi	r18, 0xFF	; 255
 122:	3f 4f       	sbci	r19, 0xFF	; 255
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	50 e0       	ldi	r21, 0x00	; 0

	for(int cnt=0;cnt<10;cnt++)
 128:	be 01       	movw	r22, r28
 12a:	63 5c       	subi	r22, 0xC3	; 195
 12c:	7f 4f       	sbci	r23, 0xFF	; 255
	{
		if(arr1[cnt]==baudrate)
 12e:	80 81       	ld	r24, Z
 130:	91 81       	ldd	r25, Z+1	; 0x01
 132:	a2 81       	ldd	r26, Z+2	; 0x02
 134:	b3 81       	ldd	r27, Z+3	; 0x03
 136:	8e 15       	cp	r24, r14
 138:	9f 05       	cpc	r25, r15
 13a:	a0 07       	cpc	r26, r16
 13c:	b1 07       	cpc	r27, r17
 13e:	19 f4       	brne	.+6      	; 0x146 <UART_config+0x7c>
			UBRR_set=arr2[cnt];
 140:	d9 01       	movw	r26, r18
 142:	4d 91       	ld	r20, X+
 144:	5c 91       	ld	r21, X
 146:	34 96       	adiw	r30, 0x04	; 4
 148:	2e 5f       	subi	r18, 0xFE	; 254
 14a:	3f 4f       	sbci	r19, 0xFF	; 255
	unsigned int arr2[]={415,207,103,68,51,34,25,16,12,8};

	UCSR1B = 0x18;  //polled reception, 8-bits,........Transmition has been disabled
	UCSR1C = 0x16;  //1 stop bit, no parity

	for(int cnt=0;cnt<10;cnt++)
 14c:	e6 17       	cp	r30, r22
 14e:	f7 07       	cpc	r31, r23
 150:	71 f7       	brne	.-36     	; 0x12e <UART_config+0x64>
			UBRR_set=arr2[cnt];
	}
	UBRR_high=UBRR_set/256;
	UBRR_low=UBRR_set%256;

	UBRR1L=(unsigned char)UBRR_low;
 152:	ca 01       	movw	r24, r20
 154:	90 70       	andi	r25, 0x00	; 0
 156:	80 93 99 00 	sts	0x0099, r24
	UBRR1H=(unsigned char)UBRR_high;
 15a:	50 93 98 00 	sts	0x0098, r21
}
 15e:	ec 96       	adiw	r28, 0x3c	; 60
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	de bf       	out	0x3e, r29	; 62
 166:	0f be       	out	0x3f, r0	; 63
 168:	cd bf       	out	0x3d, r28	; 61
 16a:	cf 91       	pop	r28
 16c:	df 91       	pop	r29
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <UART_Transmit_char>:
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
 178:	98 2f       	mov	r25, r24
	while(!(UCSR1A&0b00100000));
 17a:	80 91 9b 00 	lds	r24, 0x009B
 17e:	85 ff       	sbrs	r24, 5
 180:	fc cf       	rjmp	.-8      	; 0x17a <UART_Transmit_char+0x2>
	UDR1=ch;
 182:	90 93 9c 00 	sts	0x009C, r25
}
 186:	08 95       	ret

00000188 <UART_Receive_char>:
/* Function to recaive a single charcter using UART*/
unsigned char UART_Receive_char(void)
{
	while(!(UCSR1A&0b10000000));
 188:	80 91 9b 00 	lds	r24, 0x009B
 18c:	87 ff       	sbrs	r24, 7
 18e:	fc cf       	rjmp	.-8      	; 0x188 <UART_Receive_char>
	return UDR1;
 190:	80 91 9c 00 	lds	r24, 0x009C
}
 194:	08 95       	ret

00000196 <UART_Transmit_string>:
void UART_Transmit_string(unsigned char *str)
{
 196:	fc 01       	movw	r30, r24
 198:	07 c0       	rjmp	.+14     	; 0x1a8 <UART_Transmit_string+0x12>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 19a:	80 91 9b 00 	lds	r24, 0x009B
 19e:	85 ff       	sbrs	r24, 5
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <UART_Transmit_string+0x4>
	UDR1=ch;
 1a2:	90 93 9c 00 	sts	0x009C, r25
void UART_Transmit_string(unsigned char *str)
{
	while(*str!='\0')
	{
		UART_Transmit_char(*str);
		str++;
 1a6:	31 96       	adiw	r30, 0x01	; 1
	while(!(UCSR1A&0b10000000));
	return UDR1;
}
void UART_Transmit_string(unsigned char *str)
{
	while(*str!='\0')
 1a8:	90 81       	ld	r25, Z
 1aa:	99 23       	and	r25, r25
 1ac:	b1 f7       	brne	.-20     	; 0x19a <UART_Transmit_string+0x4>
	{
		UART_Transmit_char(*str);
		str++;
	}
}
 1ae:	08 95       	ret

000001b0 <UART_Transmit_num>:
void UART_Transmit_num(unsigned int num)
{
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	df 93       	push	r29
 1b6:	cf 93       	push	r28
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <UART_Transmit_num+0xa>
 1ba:	0f 92       	push	r0
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	9c 01       	movw	r18, r24
	unsigned char ch[3],count=2;	

	ch[0]=0;
 1c2:	19 82       	std	Y+1, r1	; 0x01
	ch[1]=0;
 1c4:	1a 82       	std	Y+2, r1	; 0x02
	ch[2]=0;
 1c6:	1b 82       	std	Y+3, r1	; 0x03
 1c8:	42 e0       	ldi	r20, 0x02	; 2
 1ca:	8e 01       	movw	r16, r28
 1cc:	0f 5f       	subi	r16, 0xFF	; 255
 1ce:	1f 4f       	sbci	r17, 0xFF	; 255
 1d0:	10 c0       	rjmp	.+32     	; 0x1f2 <UART_Transmit_num+0x42>

	while(num!=0)
	{
		ch[count]=num%10;
 1d2:	f8 01       	movw	r30, r16
 1d4:	e4 0f       	add	r30, r20
 1d6:	f1 1d       	adc	r31, r1
 1d8:	c9 01       	movw	r24, r18
 1da:	6a e0       	ldi	r22, 0x0A	; 10
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	0e 94 07 03 	call	0x60e	; 0x60e <__udivmodhi4>
 1e2:	80 83       	st	Z, r24
		num=num/10;
 1e4:	c9 01       	movw	r24, r18
 1e6:	6a e0       	ldi	r22, 0x0A	; 10
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	0e 94 07 03 	call	0x60e	; 0x60e <__udivmodhi4>
 1ee:	9b 01       	movw	r18, r22
		count--;
 1f0:	41 50       	subi	r20, 0x01	; 1

	ch[0]=0;
	ch[1]=0;
	ch[2]=0;

	while(num!=0)
 1f2:	21 15       	cp	r18, r1
 1f4:	31 05       	cpc	r19, r1
 1f6:	69 f7       	brne	.-38     	; 0x1d2 <UART_Transmit_num+0x22>
 1f8:	f8 01       	movw	r30, r16
	{
		ch[count]=num%10;
		num=num/10;
		count--;
	}
	for(count=0;count<3;count++)
 1fa:	9e 01       	movw	r18, r28
 1fc:	2c 5f       	subi	r18, 0xFC	; 252
 1fe:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		UART_Transmit_char('0'+ch[count]);
 200:	90 81       	ld	r25, Z
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 202:	80 91 9b 00 	lds	r24, 0x009B
 206:	85 ff       	sbrs	r24, 5
 208:	fc cf       	rjmp	.-8      	; 0x202 <UART_Transmit_num+0x52>
		num=num/10;
		count--;
	}
	for(count=0;count<3;count++)
	{
		UART_Transmit_char('0'+ch[count]);
 20a:	90 5d       	subi	r25, 0xD0	; 208
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
	UDR1=ch;
 20c:	90 93 9c 00 	sts	0x009C, r25
 210:	31 96       	adiw	r30, 0x01	; 1
	{
		ch[count]=num%10;
		num=num/10;
		count--;
	}
	for(count=0;count<3;count++)
 212:	e2 17       	cp	r30, r18
 214:	f3 07       	cpc	r31, r19
 216:	a1 f7       	brne	.-24     	; 0x200 <UART_Transmit_num+0x50>
	{
		UART_Transmit_char('0'+ch[count]);
	}
}
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	cf 91       	pop	r28
 220:	df 91       	pop	r29
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <UART_Receive_string>:
	
/* function to receive a string usins UART*/
unsigned char * UART_Receive_string(void)
{
 228:	df 93       	push	r29
 22a:	cf 93       	push	r28
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
 230:	64 97       	sbiw	r28, 0x14	; 20
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
	UDR1=ch;
}
/* Function to recaive a single charcter using UART*/
unsigned char UART_Receive_char(void)
{
	while(!(UCSR1A&0b10000000));
 23c:	80 91 9b 00 	lds	r24, 0x009B
 240:	87 ff       	sbrs	r24, 7
 242:	fc cf       	rjmp	.-8      	; 0x23c <UART_Receive_string+0x14>
	return UDR1;
 244:	80 91 9c 00 	lds	r24, 0x009C
	
/* function to receive a string usins UART*/
unsigned char * UART_Receive_string(void)
{
	unsigned char ch1,str[20],count=0;
	while((ch1=UART_Receive_char())!=13)
 248:	8d 30       	cpi	r24, 0x0D	; 13
 24a:	c1 f7       	brne	.-16     	; 0x23c <UART_Receive_string+0x14>
		str[count]=ch1;
		count++;
	}
	str[count]='\0';
	return &str[0];
}
 24c:	ce 01       	movw	r24, r28
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	64 96       	adiw	r28, 0x14	; 20
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	cf 91       	pop	r28
 25e:	df 91       	pop	r29
 260:	08 95       	ret

00000262 <Attribute>:
/*-------------------------------------------------------------------------------
---------------------------Function definition-----------------------------------
-------------------------------------------------------------------------------*/

void Attribute (unsigned char fgcolor, unsigned char bgcolor)
{
 262:	1f 93       	push	r17
 264:	98 2f       	mov	r25, r24
 266:	16 2f       	mov	r17, r22
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 268:	80 91 9b 00 	lds	r24, 0x009B
 26c:	85 ff       	sbrs	r24, 5
 26e:	fc cf       	rjmp	.-8      	; 0x268 <Attribute+0x6>
	UDR1=ch;
 270:	8b e1       	ldi	r24, 0x1B	; 27
 272:	80 93 9c 00 	sts	0x009C, r24
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 276:	80 91 9b 00 	lds	r24, 0x009B
 27a:	85 ff       	sbrs	r24, 5
 27c:	fc cf       	rjmp	.-8      	; 0x276 <Attribute+0x14>
	UDR1=ch;
 27e:	8b e5       	ldi	r24, 0x5B	; 91
 280:	80 93 9c 00 	sts	0x009C, r24
    UART_Transmit_char(0x1b);
    UART_Transmit_char('[');
    UART_Transmit_num(30 + fgcolor);
 284:	89 2f       	mov	r24, r25
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	4e 96       	adiw	r24, 0x1e	; 30
 28a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <UART_Transmit_num>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 28e:	80 91 9b 00 	lds	r24, 0x009B
 292:	85 ff       	sbrs	r24, 5
 294:	fc cf       	rjmp	.-8      	; 0x28e <Attribute+0x2c>
	UDR1=ch;
 296:	8b e3       	ldi	r24, 0x3B	; 59
 298:	80 93 9c 00 	sts	0x009C, r24
    UART_Transmit_char(';');
    UART_Transmit_num(40 + bgcolor);
 29c:	81 2f       	mov	r24, r17
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	88 96       	adiw	r24, 0x28	; 40
 2a2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <UART_Transmit_num>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 2a6:	80 91 9b 00 	lds	r24, 0x009B
 2aa:	85 ff       	sbrs	r24, 5
 2ac:	fc cf       	rjmp	.-8      	; 0x2a6 <Attribute+0x44>
	UDR1=ch;
 2ae:	8d e6       	ldi	r24, 0x6D	; 109
 2b0:	80 93 9c 00 	sts	0x009C, r24
    UART_Transmit_char('m');
}
 2b4:	1f 91       	pop	r17
 2b6:	08 95       	ret

000002b8 <DispStr>:

void DispStr (unsigned char x, unsigned char y, unsigned char *s, unsigned char fgcolor, unsigned char bgcolor)
{
 2b8:	ff 92       	push	r15
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	f8 2e       	mov	r15, r24
 2c4:	16 2f       	mov	r17, r22
 2c6:	ea 01       	movw	r28, r20
 2c8:	82 2f       	mov	r24, r18
 2ca:	60 2f       	mov	r22, r16
    Attribute(fgcolor, bgcolor);
 2cc:	0e 94 31 01 	call	0x262	; 0x262 <Attribute>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 2d0:	80 91 9b 00 	lds	r24, 0x009B
 2d4:	85 ff       	sbrs	r24, 5
 2d6:	fc cf       	rjmp	.-8      	; 0x2d0 <DispStr+0x18>
	UDR1=ch;
 2d8:	8b e1       	ldi	r24, 0x1B	; 27
 2da:	80 93 9c 00 	sts	0x009C, r24
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 2de:	80 91 9b 00 	lds	r24, 0x009B
 2e2:	85 ff       	sbrs	r24, 5
 2e4:	fc cf       	rjmp	.-8      	; 0x2de <DispStr+0x26>
	UDR1=ch;
 2e6:	8b e5       	ldi	r24, 0x5B	; 91
 2e8:	80 93 9c 00 	sts	0x009C, r24
    UART_Transmit_char(0x1B);
    UART_Transmit_char('[');
    UART_Transmit_num(y);
 2ec:	81 2f       	mov	r24, r17
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <UART_Transmit_num>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 2f4:	80 91 9b 00 	lds	r24, 0x009B
 2f8:	85 ff       	sbrs	r24, 5
 2fa:	fc cf       	rjmp	.-8      	; 0x2f4 <DispStr+0x3c>
	UDR1=ch;
 2fc:	8b e3       	ldi	r24, 0x3B	; 59
 2fe:	80 93 9c 00 	sts	0x009C, r24
    UART_Transmit_char(';');
    UART_Transmit_num(x);
 302:	8f 2d       	mov	r24, r15
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <UART_Transmit_num>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 30a:	80 91 9b 00 	lds	r24, 0x009B
 30e:	85 ff       	sbrs	r24, 5
 310:	fc cf       	rjmp	.-8      	; 0x30a <DispStr+0x52>
	UDR1=ch;
 312:	88 e4       	ldi	r24, 0x48	; 72
 314:	80 93 9c 00 	sts	0x009C, r24
 318:	07 c0       	rjmp	.+14     	; 0x328 <DispStr+0x70>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 31a:	80 91 9b 00 	lds	r24, 0x009B
 31e:	85 ff       	sbrs	r24, 5
 320:	fc cf       	rjmp	.-8      	; 0x31a <DispStr+0x62>
	UDR1=ch;
 322:	90 93 9c 00 	sts	0x009C, r25
void UART_Transmit_string(unsigned char *str)
{
	while(*str!='\0')
	{
		UART_Transmit_char(*str);
		str++;
 326:	21 96       	adiw	r28, 0x01	; 1
	while(!(UCSR1A&0b10000000));
	return UDR1;
}
void UART_Transmit_string(unsigned char *str)
{
	while(*str!='\0')
 328:	98 81       	ld	r25, Y
 32a:	99 23       	and	r25, r25
 32c:	b1 f7       	brne	.-20     	; 0x31a <DispStr+0x62>
    UART_Transmit_char('H');
    UART_Transmit_string(s);
}
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	08 95       	ret

0000033a <DispChar>:

void DispChar (unsigned char x, unsigned char y, unsigned char c, unsigned char fgcolor, unsigned char bgcolor)
{
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	f8 2e       	mov	r15, r24
 344:	16 2f       	mov	r17, r22
 346:	e4 2e       	mov	r14, r20
 348:	82 2f       	mov	r24, r18
 34a:	60 2f       	mov	r22, r16
    Attribute(fgcolor, bgcolor);
 34c:	0e 94 31 01 	call	0x262	; 0x262 <Attribute>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 350:	80 91 9b 00 	lds	r24, 0x009B
 354:	85 ff       	sbrs	r24, 5
 356:	fc cf       	rjmp	.-8      	; 0x350 <DispChar+0x16>
	UDR1=ch;
 358:	8b e1       	ldi	r24, 0x1B	; 27
 35a:	80 93 9c 00 	sts	0x009C, r24
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 35e:	80 91 9b 00 	lds	r24, 0x009B
 362:	85 ff       	sbrs	r24, 5
 364:	fc cf       	rjmp	.-8      	; 0x35e <DispChar+0x24>
	UDR1=ch;
 366:	8b e5       	ldi	r24, 0x5B	; 91
 368:	80 93 9c 00 	sts	0x009C, r24
    UART_Transmit_char(0x1B);
    UART_Transmit_char('[');
    UART_Transmit_num(y);
 36c:	81 2f       	mov	r24, r17
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <UART_Transmit_num>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 374:	80 91 9b 00 	lds	r24, 0x009B
 378:	85 ff       	sbrs	r24, 5
 37a:	fc cf       	rjmp	.-8      	; 0x374 <DispChar+0x3a>
	UDR1=ch;
 37c:	8b e3       	ldi	r24, 0x3B	; 59
 37e:	80 93 9c 00 	sts	0x009C, r24
    UART_Transmit_char(';');
    UART_Transmit_num(x);
 382:	8f 2d       	mov	r24, r15
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <UART_Transmit_num>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 38a:	80 91 9b 00 	lds	r24, 0x009B
 38e:	85 ff       	sbrs	r24, 5
 390:	fc cf       	rjmp	.-8      	; 0x38a <DispChar+0x50>
	UDR1=ch;
 392:	88 e4       	ldi	r24, 0x48	; 72
 394:	80 93 9c 00 	sts	0x009C, r24
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 398:	80 91 9b 00 	lds	r24, 0x009B
 39c:	85 ff       	sbrs	r24, 5
 39e:	fc cf       	rjmp	.-8      	; 0x398 <DispChar+0x5e>
	UDR1=ch;
 3a0:	e0 92 9c 00 	sts	0x009C, r14
    UART_Transmit_char('H');
    UART_Transmit_char(c);
}
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	ff 90       	pop	r15
 3aa:	ef 90       	pop	r14
 3ac:	08 95       	ret

000003ae <DispVBar>:

void DispVBar (unsigned char x, unsigned char y, unsigned char len,unsigned char CHAR, unsigned char fgcolor, unsigned char bgcolor)
{
 3ae:	bf 92       	push	r11
 3b0:	cf 92       	push	r12
 3b2:	df 92       	push	r13
 3b4:	ef 92       	push	r14
 3b6:	ff 92       	push	r15
 3b8:	0f 93       	push	r16
 3ba:	1f 93       	push	r17
 3bc:	b8 2e       	mov	r11, r24
 3be:	f6 2e       	mov	r15, r22
 3c0:	14 2f       	mov	r17, r20
 3c2:	c2 2e       	mov	r12, r18
 3c4:	d0 2e       	mov	r13, r16
 3c6:	09 c0       	rjmp	.+18     	; 0x3da <DispVBar+0x2c>
    while(len!=0)
	{
		DispChar (x,y,CHAR,fgcolor,bgcolor);
 3c8:	8b 2d       	mov	r24, r11
 3ca:	6f 2d       	mov	r22, r15
 3cc:	4c 2d       	mov	r20, r12
 3ce:	2d 2d       	mov	r18, r13
 3d0:	0e 2d       	mov	r16, r14
 3d2:	0e 94 9d 01 	call	0x33a	; 0x33a <DispChar>
		y++;
 3d6:	f3 94       	inc	r15
		len--;
 3d8:	11 50       	subi	r17, 0x01	; 1
    UART_Transmit_char(c);
}

void DispVBar (unsigned char x, unsigned char y, unsigned char len,unsigned char CHAR, unsigned char fgcolor, unsigned char bgcolor)
{
    while(len!=0)
 3da:	11 23       	and	r17, r17
 3dc:	a9 f7       	brne	.-22     	; 0x3c8 <DispVBar+0x1a>
	{
		DispChar (x,y,CHAR,fgcolor,bgcolor);
		y++;
		len--;
	}
}
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	df 90       	pop	r13
 3e8:	cf 90       	pop	r12
 3ea:	bf 90       	pop	r11
 3ec:	08 95       	ret

000003ee <DispHBar>:

void DispHBar (unsigned char x, unsigned char y, unsigned char len,unsigned char CHAR, unsigned char fgcolor, unsigned char bgcolor)
{
 3ee:	bf 92       	push	r11
 3f0:	cf 92       	push	r12
 3f2:	df 92       	push	r13
 3f4:	ef 92       	push	r14
 3f6:	ff 92       	push	r15
 3f8:	0f 93       	push	r16
 3fa:	1f 93       	push	r17
 3fc:	f8 2e       	mov	r15, r24
 3fe:	b6 2e       	mov	r11, r22
 400:	14 2f       	mov	r17, r20
 402:	c2 2e       	mov	r12, r18
 404:	d0 2e       	mov	r13, r16
 406:	09 c0       	rjmp	.+18     	; 0x41a <DispHBar+0x2c>
    while(len!=0)
	{
		DispChar (x,y,CHAR,fgcolor,bgcolor);
 408:	8f 2d       	mov	r24, r15
 40a:	6b 2d       	mov	r22, r11
 40c:	4c 2d       	mov	r20, r12
 40e:	2d 2d       	mov	r18, r13
 410:	0e 2d       	mov	r16, r14
 412:	0e 94 9d 01 	call	0x33a	; 0x33a <DispChar>
		x++;
 416:	f3 94       	inc	r15
		len--;
 418:	11 50       	subi	r17, 0x01	; 1
	}
}

void DispHBar (unsigned char x, unsigned char y, unsigned char len,unsigned char CHAR, unsigned char fgcolor, unsigned char bgcolor)
{
    while(len!=0)
 41a:	11 23       	and	r17, r17
 41c:	a9 f7       	brne	.-22     	; 0x408 <DispHBar+0x1a>
	{
		DispChar (x,y,CHAR,fgcolor,bgcolor);
		x++;
		len--;
	}
}
 41e:	1f 91       	pop	r17
 420:	0f 91       	pop	r16
 422:	ff 90       	pop	r15
 424:	ef 90       	pop	r14
 426:	df 90       	pop	r13
 428:	cf 90       	pop	r12
 42a:	bf 90       	pop	r11
 42c:	08 95       	ret

0000042e <DispStBar>:

void DispStBar (unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char c, unsigned char fgcolor, unsigned char bgcolor)
{
 42e:	af 92       	push	r10
 430:	bf 92       	push	r11
 432:	cf 92       	push	r12
 434:	df 92       	push	r13
 436:	ef 92       	push	r14
 438:	ff 92       	push	r15
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	b8 2e       	mov	r11, r24
 440:	d6 2e       	mov	r13, r22
 442:	f4 2e       	mov	r15, r20
 444:	12 2f       	mov	r17, r18
 446:	a0 2e       	mov	r10, r16
	if(x1==x2)
 448:	84 17       	cp	r24, r20
 44a:	c1 f4       	brne	.+48     	; 0x47c <DispStBar+0x4e>
	{
		do
		{
			if(y1>y2)
 44c:	1d 15       	cp	r17, r13
 44e:	48 f4       	brcc	.+18     	; 0x462 <DispStBar+0x34>
			{
			DispChar (x2,y2,c,fgcolor,bgcolor);y2++;
 450:	8b 2d       	mov	r24, r11
 452:	61 2f       	mov	r22, r17
 454:	4a 2d       	mov	r20, r10
 456:	2e 2d       	mov	r18, r14
 458:	0c 2d       	mov	r16, r12
 45a:	0e 94 9d 01 	call	0x33a	; 0x33a <DispChar>
 45e:	1f 5f       	subi	r17, 0xFF	; 255
 460:	0a c0       	rjmp	.+20     	; 0x476 <DispStBar+0x48>
			}
			else if(y2>y1)
 462:	d1 16       	cp	r13, r17
 464:	40 f4       	brcc	.+16     	; 0x476 <DispStBar+0x48>
			{
			DispChar (x1,y1,c,fgcolor,bgcolor);y1++;
 466:	8b 2d       	mov	r24, r11
 468:	6d 2d       	mov	r22, r13
 46a:	4a 2d       	mov	r20, r10
 46c:	2e 2d       	mov	r18, r14
 46e:	0c 2d       	mov	r16, r12
 470:	0e 94 9d 01 	call	0x33a	; 0x33a <DispChar>
 474:	d3 94       	inc	r13
			}
		}while(y1!=y2);
 476:	d1 16       	cp	r13, r17
 478:	49 f7       	brne	.-46     	; 0x44c <DispStBar+0x1e>
 47a:	19 c0       	rjmp	.+50     	; 0x4ae <DispStBar+0x80>
	}
	else if(y1==y2)
 47c:	62 17       	cp	r22, r18
 47e:	b9 f4       	brne	.+46     	; 0x4ae <DispStBar+0x80>
	{
		do
		{
			if(x1>x2)
 480:	fb 14       	cp	r15, r11
 482:	48 f4       	brcc	.+18     	; 0x496 <DispStBar+0x68>
			{
			DispChar (x2,y2,c,fgcolor,bgcolor);x2++;
 484:	8f 2d       	mov	r24, r15
 486:	6d 2d       	mov	r22, r13
 488:	4a 2d       	mov	r20, r10
 48a:	2e 2d       	mov	r18, r14
 48c:	0c 2d       	mov	r16, r12
 48e:	0e 94 9d 01 	call	0x33a	; 0x33a <DispChar>
 492:	f3 94       	inc	r15
 494:	0a c0       	rjmp	.+20     	; 0x4aa <DispStBar+0x7c>
			}
			else if(x2>x1)
 496:	bf 14       	cp	r11, r15
 498:	40 f4       	brcc	.+16     	; 0x4aa <DispStBar+0x7c>
			{
			DispChar (x1,y1,c,fgcolor,bgcolor);x1++;
 49a:	8b 2d       	mov	r24, r11
 49c:	6d 2d       	mov	r22, r13
 49e:	4a 2d       	mov	r20, r10
 4a0:	2e 2d       	mov	r18, r14
 4a2:	0c 2d       	mov	r16, r12
 4a4:	0e 94 9d 01 	call	0x33a	; 0x33a <DispChar>
 4a8:	b3 94       	inc	r11
			}
		}while(x1!=x2);
 4aa:	bf 14       	cp	r11, r15
 4ac:	49 f7       	brne	.-46     	; 0x480 <DispStBar+0x52>
	}
}
 4ae:	1f 91       	pop	r17
 4b0:	0f 91       	pop	r16
 4b2:	ff 90       	pop	r15
 4b4:	ef 90       	pop	r14
 4b6:	df 90       	pop	r13
 4b8:	cf 90       	pop	r12
 4ba:	bf 90       	pop	r11
 4bc:	af 90       	pop	r10
 4be:	08 95       	ret

000004c0 <DispCrsBar>:

void DispCrsBar (unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char c, unsigned char fgcolor, unsigned char bgcolor)
{
 4c0:	af 92       	push	r10
 4c2:	bf 92       	push	r11
 4c4:	cf 92       	push	r12
 4c6:	df 92       	push	r13
 4c8:	ef 92       	push	r14
 4ca:	ff 92       	push	r15
 4cc:	0f 93       	push	r16
 4ce:	1f 93       	push	r17
 4d0:	f8 2e       	mov	r15, r24
 4d2:	16 2f       	mov	r17, r22
 4d4:	b4 2e       	mov	r11, r20
 4d6:	d2 2e       	mov	r13, r18
 4d8:	a0 2e       	mov	r10, r16
	if( ((x1-x2)==(y1-y2)) || ((x2-x1)==(y2-y1)) || ((x1-x2)==(y2-y1)) || ((x2-x1)==(y1-y2)) )
 4da:	e8 2f       	mov	r30, r24
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	24 2f       	mov	r18, r20
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	af 01       	movw	r20, r30
 4e4:	42 1b       	sub	r20, r18
 4e6:	53 0b       	sbc	r21, r19
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	8d 2d       	mov	r24, r13
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	db 01       	movw	r26, r22
 4f0:	a8 1b       	sub	r26, r24
 4f2:	b9 0b       	sbc	r27, r25
 4f4:	4a 17       	cp	r20, r26
 4f6:	5b 07       	cpc	r21, r27
 4f8:	69 f0       	breq	.+26     	; 0x514 <DispCrsBar+0x54>
 4fa:	2e 1b       	sub	r18, r30
 4fc:	3f 0b       	sbc	r19, r31
 4fe:	86 1b       	sub	r24, r22
 500:	97 0b       	sbc	r25, r23
 502:	28 17       	cp	r18, r24
 504:	39 07       	cpc	r19, r25
 506:	31 f0       	breq	.+12     	; 0x514 <DispCrsBar+0x54>
 508:	48 17       	cp	r20, r24
 50a:	59 07       	cpc	r21, r25
 50c:	19 f0       	breq	.+6      	; 0x514 <DispCrsBar+0x54>
 50e:	2a 17       	cp	r18, r26
 510:	3b 07       	cpc	r19, r27
 512:	99 f5       	brne	.+102    	; 0x57a <DispCrsBar+0xba>
	{
		if( ( (x1>x2) && (y1<y2) ) )
 514:	bf 14       	cp	r11, r15
 516:	30 f4       	brcc	.+12     	; 0x524 <DispCrsBar+0x64>
 518:	1d 15       	cp	r17, r13
 51a:	10 f5       	brcc	.+68     	; 0x560 <DispCrsBar+0xa0>
		{
		do
		{
		x1--;
		y1++;
 51c:	1f 5f       	subi	r17, 0xFF	; 255
		}while(y1<=y2);
 51e:	d1 16       	cp	r13, r17
 520:	e8 f7       	brcc	.-6      	; 0x51c <DispCrsBar+0x5c>
 522:	2b c0       	rjmp	.+86     	; 0x57a <DispCrsBar+0xba>
		}
		
		else if( ( (x1<x2) && (y1>y2) ) )
 524:	fb 14       	cp	r15, r11
 526:	48 f5       	brcc	.+82     	; 0x57a <DispCrsBar+0xba>
 528:	d1 16       	cp	r13, r17
 52a:	60 f4       	brcc	.+24     	; 0x544 <DispCrsBar+0x84>
		{
		do
		{
		DispChar (x1,y1,c,fgcolor,bgcolor);
 52c:	8f 2d       	mov	r24, r15
 52e:	61 2f       	mov	r22, r17
 530:	4a 2d       	mov	r20, r10
 532:	2e 2d       	mov	r18, r14
 534:	0c 2d       	mov	r16, r12
 536:	0e 94 9d 01 	call	0x33a	; 0x33a <DispChar>
		x1++;
 53a:	f3 94       	inc	r15
		y1--;
 53c:	11 50       	subi	r17, 0x01	; 1
		}while(y1>=y2);
 53e:	1d 15       	cp	r17, r13
 540:	a8 f7       	brcc	.-22     	; 0x52c <DispCrsBar+0x6c>
 542:	1b c0       	rjmp	.+54     	; 0x57a <DispCrsBar+0xba>
		}
		
		else if( ( (x1<x2) && (y1<y2) ) )
 544:	1d 15       	cp	r17, r13
 546:	c8 f4       	brcc	.+50     	; 0x57a <DispCrsBar+0xba>
		{
		do
		{
		DispChar (x1,y1,c,fgcolor,bgcolor);
 548:	8f 2d       	mov	r24, r15
 54a:	61 2f       	mov	r22, r17
 54c:	4a 2d       	mov	r20, r10
 54e:	2e 2d       	mov	r18, r14
 550:	0c 2d       	mov	r16, r12
 552:	0e 94 9d 01 	call	0x33a	; 0x33a <DispChar>
		x1++;
 556:	f3 94       	inc	r15
		y1++;
 558:	1f 5f       	subi	r17, 0xFF	; 255
		}while(y1<=y2);
 55a:	d1 16       	cp	r13, r17
 55c:	a8 f7       	brcc	.-22     	; 0x548 <DispCrsBar+0x88>
 55e:	0d c0       	rjmp	.+26     	; 0x57a <DispCrsBar+0xba>
		}		
		
		else if( ( (x1>x2) && (y1>y2) ) )
 560:	d1 16       	cp	r13, r17
 562:	58 f4       	brcc	.+22     	; 0x57a <DispCrsBar+0xba>
		{
		do
		{
		DispChar (x1,y1,c,fgcolor,bgcolor);
 564:	8f 2d       	mov	r24, r15
 566:	61 2f       	mov	r22, r17
 568:	4a 2d       	mov	r20, r10
 56a:	2e 2d       	mov	r18, r14
 56c:	0c 2d       	mov	r16, r12
 56e:	0e 94 9d 01 	call	0x33a	; 0x33a <DispChar>
		x1--;
 572:	fa 94       	dec	r15
		y1--;
 574:	11 50       	subi	r17, 0x01	; 1
		}while(y1>=y2);
 576:	1d 15       	cp	r17, r13
 578:	a8 f7       	brcc	.-22     	; 0x564 <DispCrsBar+0xa4>
		}
	}
}
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	ff 90       	pop	r15
 580:	ef 90       	pop	r14
 582:	df 90       	pop	r13
 584:	cf 90       	pop	r12
 586:	bf 90       	pop	r11
 588:	af 90       	pop	r10
 58a:	08 95       	ret

0000058c <DispClrScr>:

void DispClrScr (unsigned char fgcolor, unsigned char bgcolor)
{
    Attribute(fgcolor,bgcolor);
 58c:	0e 94 31 01 	call	0x262	; 0x262 <Attribute>
 590:	e0 e0       	ldi	r30, 0x00	; 0
 592:	f1 e0       	ldi	r31, 0x01	; 1
 594:	07 c0       	rjmp	.+14     	; 0x5a4 <DispClrScr+0x18>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 596:	80 91 9b 00 	lds	r24, 0x009B
 59a:	85 ff       	sbrs	r24, 5
 59c:	fc cf       	rjmp	.-8      	; 0x596 <DispClrScr+0xa>
	UDR1=ch;
 59e:	90 93 9c 00 	sts	0x009C, r25
void UART_Transmit_string(unsigned char *str)
{
	while(*str!='\0')
	{
		UART_Transmit_char(*str);
		str++;
 5a2:	31 96       	adiw	r30, 0x01	; 1
	while(!(UCSR1A&0b10000000));
	return UDR1;
}
void UART_Transmit_string(unsigned char *str)
{
	while(*str!='\0')
 5a4:	90 81       	ld	r25, Z
 5a6:	99 23       	and	r25, r25
 5a8:	b1 f7       	brne	.-20     	; 0x596 <DispClrScr+0xa>
    UART_Transmit_string("\x1B[2J");
}
 5aa:	08 95       	ret

000005ac <main>:
#include"VT102lib.h"
#include"myuart.h"
#include<avr/io.h>
#include<util/delay.h>
void main(){
 5ac:	ef 92       	push	r14
 5ae:	0f 93       	push	r16
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
	UART_config(9600);
 5b4:	60 e8       	ldi	r22, 0x80	; 128
 5b6:	75 e2       	ldi	r23, 0x25	; 37
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 65 00 	call	0xca	; 0xca <UART_config>
	DispClrScr(COLOR_WHITE, COLOR_WHITE);
 5c0:	87 e0       	ldi	r24, 0x07	; 7
 5c2:	67 e0       	ldi	r22, 0x07	; 7
 5c4:	0e 94 c6 02 	call	0x58c	; 0x58c <DispClrScr>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5c8:	c0 e9       	ldi	r28, 0x90	; 144
 5ca:	d1 e0       	ldi	r29, 0x01	; 1
	while(1){
	DispHBar(10,5,16,'A',COLOR_BLUE,COLOR_RED);
 5cc:	8a e0       	ldi	r24, 0x0A	; 10
 5ce:	65 e0       	ldi	r22, 0x05	; 5
 5d0:	40 e1       	ldi	r20, 0x10	; 16
 5d2:	21 e4       	ldi	r18, 0x41	; 65
 5d4:	04 e0       	ldi	r16, 0x04	; 4
 5d6:	ee 24       	eor	r14, r14
 5d8:	e3 94       	inc	r14
 5da:	0e 94 f7 01 	call	0x3ee	; 0x3ee <DispHBar>
 5de:	88 e8       	ldi	r24, 0x88	; 136
 5e0:	93 e1       	ldi	r25, 0x13	; 19
 5e2:	fe 01       	movw	r30, r28
 5e4:	31 97       	sbiw	r30, 0x01	; 1
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <main+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5ea:	d9 f7       	brne	.-10     	; 0x5e2 <main+0x36>
	_delay_ms(500);
	DispHBar(10,5,16,'B',COLOR_RED,COLOR_BLUE);
 5ec:	8a e0       	ldi	r24, 0x0A	; 10
 5ee:	65 e0       	ldi	r22, 0x05	; 5
 5f0:	40 e1       	ldi	r20, 0x10	; 16
 5f2:	22 e4       	ldi	r18, 0x42	; 66
 5f4:	01 e0       	ldi	r16, 0x01	; 1
 5f6:	94 e0       	ldi	r25, 0x04	; 4
 5f8:	e9 2e       	mov	r14, r25
 5fa:	0e 94 f7 01 	call	0x3ee	; 0x3ee <DispHBar>
 5fe:	88 e8       	ldi	r24, 0x88	; 136
 600:	93 e1       	ldi	r25, 0x13	; 19
 602:	fe 01       	movw	r30, r28
 604:	31 97       	sbiw	r30, 0x01	; 1
 606:	f1 f7       	brne	.-4      	; 0x604 <main+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 608:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 60a:	d9 f7       	brne	.-10     	; 0x602 <main+0x56>
 60c:	df cf       	rjmp	.-66     	; 0x5cc <main+0x20>

0000060e <__udivmodhi4>:
 60e:	aa 1b       	sub	r26, r26
 610:	bb 1b       	sub	r27, r27
 612:	51 e1       	ldi	r21, 0x11	; 17
 614:	07 c0       	rjmp	.+14     	; 0x624 <__udivmodhi4_ep>

00000616 <__udivmodhi4_loop>:
 616:	aa 1f       	adc	r26, r26
 618:	bb 1f       	adc	r27, r27
 61a:	a6 17       	cp	r26, r22
 61c:	b7 07       	cpc	r27, r23
 61e:	10 f0       	brcs	.+4      	; 0x624 <__udivmodhi4_ep>
 620:	a6 1b       	sub	r26, r22
 622:	b7 0b       	sbc	r27, r23

00000624 <__udivmodhi4_ep>:
 624:	88 1f       	adc	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	5a 95       	dec	r21
 62a:	a9 f7       	brne	.-22     	; 0x616 <__udivmodhi4_loop>
 62c:	80 95       	com	r24
 62e:	90 95       	com	r25
 630:	bc 01       	movw	r22, r24
 632:	cd 01       	movw	r24, r26
 634:	08 95       	ret

00000636 <_exit>:
 636:	f8 94       	cli

00000638 <__stop_program>:
 638:	ff cf       	rjmp	.-2      	; 0x638 <__stop_program>
